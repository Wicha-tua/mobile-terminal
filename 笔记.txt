### 屏幕尺寸——设备出厂就设置好的
		屏幕对角线的长度  ， 单位是英寸
### 屏幕分辨率——设备出厂就设置好的
               横纵像素点
### 屏幕像素密度 ——设备出厂就设置好的
              每英寸具有的像素点的个数  
### 物理像素——设备出厂就设置好的
		屏幕最小粒子     
### CSS像素
		抽象的层
### 设备独立像素——设备出厂就设置好的
		CSS像素  
### 像素比——设备出厂就设置好的
		物理像素/设备独立像素
### 位图像素
		图片
### 视口
		内容区的视口
		带滚动条的视口宽度
		整个浏览器的窗口
		屏幕的视口大小
### 布局视口
        默认宽度 980px  css像素
### 视觉视口
	与屏幕大小一样大
### 理想视口
	布局视口 = 视觉视口 = 理想视口
### 不加meta 标签
	优点：可以完整的呈现pc端的页面
		  等比
	缺点：元素文字都被压缩，用户体验不好  
### 加meta标签
	优点：元素文字可以清晰的展现
	缺点：没有实现等比
### PC端的缩放
	特性： 快元素： 大小不变（物理） 面积变大
		  行内元素 ： 大小发生变化
		 视口变小  


### 移动端缩放
  1. 不加meta（默认情况）
  	  布局视口的宽度要大于视觉视口，不考虑理想视口
  	  真正的缩放控制的不是他们之间的距离，他们之间本身
  	  也没有大小，从技术层面上讲，缩放就是放大或缩小
  	  css像素大小的过程，改变的是视觉视口的尺寸
  	  （放大操作，看见的东西越来越少）
    放大：
    CSS像素面积变大
	一个CSS像素所包含的物理像素变多
	视觉视口所包含的CSS像素个数变少
	
 2.缩小
 	CSS像素面积变小
 	一个CSS像素所包含的物理像素减少
 	视觉视口所包含的css像素个数变多
 
 ### this
 	函数调用，window
 	对象调用， obj
 	call,apply(数组)
 	bind
 	构造函数，新创建的对象，this就是谁
 ### 回调函数
 	 我们定义的
 	 没有调用
 	 最后执行this？？？不确定	
 	
	
	
    
     